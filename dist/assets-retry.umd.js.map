{"version":3,"file":"assets-retry.umd.js","sources":["../src/util.ts","../src/url.ts","../src/constants.ts","../src/retry-async.ts","../src/collector.ts","../src/retry-sync.ts","../src/retry-css.ts","../src/assets-retry.ts"],"sourcesContent":["import { scriptTag, linkTag, doc, retryIdentifier } from './constants'\n\nexport const identity = function<T>(x: T): T {\n    return x\n}\nexport const noop = () => {\n    /* noop */\n}\n\nexport const hasOwn = Object.prototype.hasOwnProperty\n/**\n * safely calls a function\n *\n * @template T this\n * @template R ReturnType<func>\n * @param {(this: T, ...callbackArgs: any[]) => R} func\n * @param {T} thisArg\n * @param {*} args\n * @returns {R}\n */\nexport const safeCall = function<T, R>(\n    func: (this: T, ...callbackArgs: any[]) => R,\n    thisArg: T,\n    args: any\n): R {\n    // eslint-disable-next-line\n    if (typeof func !== 'function') {\n        return null as any\n    }\n    return func.call(thisArg, args)\n}\n\n/**\n * replace a substring with new one\n *\n * @param {string} current current string\n * @param {string} oldStr substring to replace\n * @param {string} newStr new string\n * @returns\n */\nexport const stringReplace = function(current: string, oldStr: string, newStr: string) {\n    const idx = current.indexOf(oldStr)\n    if (idx === -1) {\n        return current;\n    }\n    return current.substring(0, idx) + newStr + current.substring(idx + oldStr.length)\n}\n\n/**\n * convert a camelCase string to a dash-separated string.\n *\n * @param {string} str\n * @returns\n */\nexport const toSlug = function(str: string) {\n    return str.replace(/([a-z])([A-Z])/g, (_, $1, $2) => `${$1}-${$2.toLowerCase()}`)\n}\n\n/**\n * set default value for object\n *\n * @param {any} obj object\n * @param {string} key key\n * @param {any} defaultValue default value\n */\nexport const setDefault = function(obj: any, key: string, defaultValue: any) {\n    obj[key] = obj[key] || defaultValue\n}\n\n/**\n * transform an array-like object to array\n *\n * @template T\n * @param {ArrayLike<T>} arrayLike\n * @returns {T[]}\n */\nexport const arrayFrom = function<T>(arrayLike: ArrayLike<T>): T[] {\n    return [].slice.call(arrayLike)\n}\n/**\n * collect all property names from current object to its ancestor\n *\n * @param {any} obj\n * @returns\n */\nexport const collectPropertyNames = function(obj: any) {\n    const getProto = Object.getPrototypeOf\n        ? Object.getPrototypeOf\n        : function(x: any) {\n              return x.__proto__\n          }\n    let keys = Object.keys(obj);\n    while (getProto(obj)) {\n        keys = keys.concat(Object.keys(getProto(obj)))\n        obj = getProto(obj)\n    }\n    return keys.filter(key => key !== 'constructor');\n}\n\n/**\n * @example\n * isFunctionProperty(HTMLScriptElement.prototype, 'src); // false\n * isFunctionProperty(HTMLScriptElement.prototype, 'getAttribute'); // true\n * @param {any} proto\n * @param {string} key\n * @returns\n */\nexport const isFunctionProperty = function(proto: any, key: string) {\n    try {\n        return typeof proto[key] === 'function'\n    } catch (e) {\n        // TypeError: Illegal invocation\n        // when evaluating properties like\n        // HTMLScriptElement.prototype.src\n        return false\n    }\n}\n\n/**\n * on some browsers, calling `document.write` when \n * `document.readyState` is `loading` will clear the whole\n * page, which is not what we wanted.\n *\n * @returns\n */\nexport const supportDocumentWrite = () => {\n    return !(/Edge|MSIE|rv:/i.test(navigator.userAgent))\n}\n\n/**\n * loads a new script element by previous failed script element\n *\n * @param {HTMLScriptElement} $script previous script element\n * @param {string} newSrc new url to try\n */\nexport const loadNextScript = function(\n    $script: HTMLScriptElement,\n    newSrc: string,\n    onload: () => void = noop\n) {\n    // when dealing with failed script tags in html,\n    // use `document.write` to ensure the correctness\n    // of loading order\n    if (doc.readyState === 'loading' && supportDocumentWrite()) {\n        const retryId = randomString()\n        const newHtml = $script.outerHTML\n            // delete previous retry id\n            .replace(/data-retry-id=\"[^\"]+\"/, '')\n            .replace(/src=(?:\"[^\"]+\"|.+)([ >])/, `${retryIdentifier}=${retryId} src=\"${newSrc}\"$1`)\n        doc.write(newHtml)\n        const newScript = doc.querySelector(\n            `script[${retryIdentifier}=\"${retryId}\"]`\n        ) as HTMLScriptElement\n        if (newScript) {\n            newScript.onload = onload\n        }\n        return\n    }\n    const $newScript = doc.createElement(scriptTag)\n    // copy script properties except src:\n    // type, noModule, charset, async, defer,\n    // crossOrigin, text, referrerPolicy, event,\n    // htmlFor, integrity (chrome)\n    Object.keys(HTMLScriptElement.prototype).forEach(function(key: string) {\n        if (key !== 'src' && ($script as any)[key] && typeof ($script as any)[key] !== 'object') {\n            try {\n                ;($newScript as any)[key] = ($script as any)[key]\n            } catch (_) {\n                /* noop */\n            }\n        }\n    })\n    $newScript.src = newSrc\n    $newScript.onload = $script.onload\n    $newScript.onerror = $script.onerror\n    $newScript.setAttribute(retryIdentifier, randomString())\n    // webpack nonce for csp\n    const originalNonce = $script.getAttribute('nonce')\n    if (originalNonce) {\n        $newScript.setAttribute('nonce', originalNonce)\n    }\n    doc.getElementsByTagName('head')[0].appendChild($newScript)\n}\n\n\n/**\n * get rules from styleSheet\n *\n * @param {CSSStyleSheet} styleSheet\n * @returns\n */\nexport const getCssRules = function(styleSheet: CSSStyleSheet) {\n    if (styleSheet.rules) {\n        return styleSheet.rules\n    }\n    if (styleSheet.cssRules) {\n        return styleSheet.cssRules\n    }\n    return []\n}\n/**\n * test if current browser support CSSRuleList\n *\n * @param {CSSStyleSheet} styleSheet\n * @returns\n */\nexport const supportRules = function(styleSheet: CSSStyleSheet) {\n    try {\n        const rules = getCssRules(styleSheet)\n        return rules.length > 0\n    } catch (_) {\n        return false\n    }\n}\n\n/**\n * loads a new link element by previous failed link element\n *\n * @param {HTMLLinkElement} $link previous link element\n * @param {string} newHref new url to try\n */\nexport const loadNextLink = function($link: HTMLLinkElement, newHref: string, onload: () => void) {\n    const $newLink = doc.createElement(linkTag)\n    // copy link properties except href:\n    // disabled, href, crossOrigin, rel, relList, media, hreflang,\n    // type, as, referrerPolicy, sizes, imageSrcset, imageSizes,\n    // charset, rev, target, sheet, integrity, import (chrome)\n    Object.keys(HTMLLinkElement.prototype).forEach(function(key: string) {\n        if (key !== 'href' && ($link as any)[key] && typeof ($link as any)[key] !== 'object') {\n            try {\n                ;($newLink as any)[key] = ($link as any)[key]\n            } catch (_) {\n                /* noop */\n            }\n        }\n    })\n    $newLink.href = newHref\n    $newLink.onload = onload\n    $newLink.setAttribute(retryIdentifier, randomString())\n    doc.getElementsByTagName('head')[0].appendChild($newLink)\n}\n\nexport const hashTarget = function(element: EventTarget | null) {\n    if (!element) {\n        return 'null'\n    }\n    if (!(element instanceof HTMLElement)) {\n        return 'not_supported'\n    }\n    const nodeName = element.nodeName;\n    const src = (element as any).src;\n    const href = (element as any).href;\n    const dataRetryId = element.getAttribute(retryIdentifier);\n    return [nodeName, src, href, dataRetryId].join(';')\n}\n\nexport const randomString = () => Math.random().toString(36).slice(2)","import { retryCollector, RetryStatistics } from './collector'\nimport { retryTimesProp, failedProp, succeededProp } from './constants'\n\nexport type Domain = string[] | { [x: string]: string }\nexport interface DomainMap {\n    [x: string]: string\n}\n\n/**\n * generate the domain map from user\n * @example\n * generateDomainMap(['a.cdn', 'b.cdn', 'c.cdn']) // {'a.cdn': 'b.cdn', 'b.cdn': 'c.cdn', 'c.cdn': 'a.cdn'}\n *\n * @param {Domain} domains\n * @returns {DomainMap}\n */\nexport const prepareDomainMap = function(domains: Domain): DomainMap {\n    // array\n    if (Array.isArray(domains)) {\n        return domains.reduce(function(domainMap, domain, idx, array) {\n            domainMap[domain] = array[(idx + 1) % array.length]\n            return domainMap\n        }, {} as DomainMap)\n    }\n    // object\n    return domains\n}\n\n/**\n * get path from src\n * @example\n * getUrlPath('https://a.cdn/js/1.js', 'a.cdn'); // '/js/1.js'\n * getUrlPath('https://a.cdn/namespace/js/1.js', 'a.cdn/namespace'); // '/js/1.js'\n * @param {string} src script src\n * @param {string} currentDomain domain name\n * @returns {string}\n */\nexport const getUrlPath = function(src: string, currentDomain: string) {\n    return src.substr(src.indexOf(currentDomain) + currentDomain.length, src.length)\n}\n\n/**\n * find out the domain of current loading script\n *\n * @param {string} src\n * @param {{ [x: string]: string }} domainMap\n * @returns\n */\nexport const getCurrentDomain = function(src: string, domainMap: DomainMap) {\n    return (\n        Object.keys(domainMap)\n            .filter(function(domain) {\n                return src.indexOf(domain) > -1\n            })\n            // sort by length (relevance)\n            .sort((prev, next) => next.length - prev.length)[0]\n    )\n}\n\n/**\n * extract domain from url, and get the\n * corresponding statistic collector\n * @param {string} url\n * @returns\n */\nexport const extractInfoFromUrl = function(\n    url: string,\n    domainMap: DomainMap\n): [string?, RetryStatistics?] {\n    const currentDomain = getCurrentDomain(url, domainMap)\n    if (!currentDomain) {\n        return []\n    }\n    const srcPath = getUrlPath(url, currentDomain)\n    retryCollector[srcPath] = retryCollector[srcPath] || {\n        [retryTimesProp]: 0,\n        [failedProp]: [],\n        [succeededProp]: []\n    }\n    return [currentDomain, retryCollector[srcPath]]\n}\n","export const retryTimesProp = 'retryTimes'\nexport const succeededProp = 'succeeded'\nexport const failedProp = 'failed'\nexport const maxRetryCountProp = 'maxRetryCount'\nexport const onRetryProp = 'onRetry'\nexport const domainProp = 'domain'\nexport const innerScriptProp = '_$assetsRetryScript'\nexport const innerOnloadProp = '_$assetsRetryOnload'\nexport const innerOnerrorProp = '_$assetsRetryOnerror'\nexport const scriptTag = 'script'\nexport const linkTag = 'link'\nexport const hookedIdentifier = 'data-assets-retry-hooked'\nexport const retryIdentifier = 'data-retry-id'\nexport const win = window\nexport const doc = window.document\n","import {\n    collectPropertyNames,\n    stringReplace,\n    isFunctionProperty,\n    loadNextScript,\n    safeCall,\n    hasOwn,\n    noop\n} from './util'\n\nimport {\n    retryTimesProp,\n    succeededProp,\n    failedProp,\n    maxRetryCountProp,\n    onRetryProp,\n    domainProp,\n    innerScriptProp,\n    innerOnloadProp,\n    innerOnerrorProp,\n    scriptTag,\n    hookedIdentifier,\n    doc,\n    win\n} from './constants'\nimport { retryCollector } from './collector'\nimport { prepareDomainMap, extractInfoFromUrl } from './url'\nimport { InnerAssetsRetryOptions } from './assets-retry'\nimport initCss from './retry-css'\n\nexport interface HookedScript {\n    [innerScriptProp]: HTMLScriptElement\n    [innerOnerrorProp]: (e: Partial<Event>) => void\n    [x: string]: any\n}\n\n// cache all properties of HTMLScriptElement.prototype\n// (including prototype properties) because it's big (length > 200)\n// otherwise it would be calculated every time when\n// a script request failed.\nlet scriptProperties: string[];\ntry {\n    scriptProperties = collectPropertyNames(HTMLScriptElement.prototype)\n} catch (_) { /* noop */ }\n\n/**\n * create the descriptor of hooked script object,\n * accessing any property on the hooked script object\n * will be delegated to the real HTMLScriptElement\n * except onload/onerror events\n *\n * @param {any} self hookedScript\n * @param {object} opts\n * @returns\n */\nconst getHookedScriptDescriptors = function(self: HookedScript, opts: InnerAssetsRetryOptions) {\n    const maxRetryCount = opts[maxRetryCountProp]\n    const domainMap = prepareDomainMap(opts[domainProp])\n    const onRetry = opts[onRetryProp]\n    return scriptProperties.reduce(function(descriptor, key) {\n        const isFn = isFunctionProperty(HTMLScriptElement.prototype, key)\n        // for function properties,\n        // do not assign getters/setters\n        if (isFn) {\n            descriptor[key] = {\n                value: function() {\n                    return (self[innerScriptProp] as any)[key].apply(\n                        self[innerScriptProp],\n                        arguments\n                    )\n                }\n            }\n        } else {\n            descriptor[key] = {\n                set: function(newVal) {\n                    if (key === 'onerror') {\n                        self[innerOnerrorProp] = newVal\n                        // hook error events,\n                        // forward the original onerror handler\n                        // to the next script element to load\n                        ;(self[innerScriptProp] as any).onerror = function(event: ErrorEvent) {\n                            event.stopPropagation && event.stopPropagation()\n                            const src = self[innerScriptProp].src\n                            const [currentDomain, currentCollector] = extractInfoFromUrl(\n                                src,\n                                domainMap\n                            )\n                            if (!currentDomain || !currentCollector) {\n                                return\n                            }\n                            const newSrc = stringReplace(\n                                src,\n                                currentDomain,\n                                domainMap[currentDomain]\n                            )\n                            const userModifiedSrc = onRetry(newSrc, src, currentCollector)\n                            // if onRetry returns null, do not retry this url\n                            if (userModifiedSrc === null) {\n                                return\n                            }\n                            // eslint-disable-next-line\n                            if (typeof userModifiedSrc !== 'string') {\n                                throw new Error('a string should be returned in `onRetry` function')\n                            }\n                            if (currentCollector[retryTimesProp] <= maxRetryCount) {\n                                loadNextScript(self[innerScriptProp], userModifiedSrc)\n                            } else {\n                                safeCall(self[innerOnerrorProp], self[innerScriptProp], event)\n                            }\n                        }\n                        return\n                    }\n                    if (key === 'onload') {\n                        self[innerOnloadProp] = newVal\n                        self[innerScriptProp].onload = function(event: Event) {\n                            const src = self[innerScriptProp].src\n                            const [_, currentCollector] = extractInfoFromUrl(src, domainMap)\n                            if (!currentCollector) {\n                                return\n                            }\n                            if (currentCollector[failedProp].indexOf(src) === -1) {\n                                currentCollector[succeededProp].push(src)\n                            }\n                            if (newVal && !newVal._called) {\n                                newVal._called = true\n                                newVal.call(self[innerScriptProp], event)\n                            }\n                        }\n                        return\n                    }\n                    ;(self[innerScriptProp] as any)[key] = newVal\n                },\n                get() {\n                    return (self[innerScriptProp] as any)[key]\n                }\n            }\n        }\n        return descriptor\n    }, {} as PropertyDescriptorMap)\n}\n\nconst createHookedScript = function(\n    $script: HTMLScriptElement,\n    opts: InnerAssetsRetryOptions\n): HookedScript {\n    $script.setAttribute(hookedIdentifier, 'true')\n    const $hookedScript: HookedScript = {\n        [innerScriptProp]: $script,\n        [innerOnerrorProp]: noop\n    }\n    const descriptors = getHookedScriptDescriptors($hookedScript, opts)\n    Object.defineProperties($hookedScript, descriptors)\n    return $hookedScript\n}\n\n/**\n * hook `document.createElement`\n * @param {InnerAssetsRetryOptions} opts\n */\nconst hookCreateElement = function(opts: InnerAssetsRetryOptions) {\n    const originalCreateElement = doc.createElement\n    ;(doc as any).createElement = function(name: string, options: any): any {\n        if (name === scriptTag) {\n            return createHookedScript((originalCreateElement as any).call(doc, scriptTag), opts)\n        }\n        return originalCreateElement.call(doc, name, options)\n    }\n    doc.createElement.toString = function() {\n        return 'function createElement() { [native code] }'\n    }\n}\n\n/**\n * create a hooked function which hooks every method of target.\n * if a method is hooked and its arguments contains the inner script tag\n * it will be replaced with the value of inner script tag\n *\n * @param {any} target hook target\n */\nconst hookPrototype = function(target: any, opts: InnerAssetsRetryOptions) {\n    const functionKeys = Object.keys(target).filter(key => isFunctionProperty(target, key))\n    functionKeys.forEach(key => {\n        const originalFunc = target[key]\n        target[key] = function(): any {\n            const args = [].slice.call(arguments).map((item: any) => {\n                return hasOwn.call(item, innerScriptProp) ? item[innerScriptProp] : item\n            })\n            return originalFunc.apply(this, args)\n        }\n        // keep original toString\n        if (/^\\w+$/.test(key)) {\n            target[key].toString = new Function(`return 'function ${key}() { [native code] }'`)\n        }\n    })\n}\n/**\n * init asynchronous retrying of script tags\n * @param {InnerAssetsRetryOptions} opts\n * @returns\n */\nexport default function initAsync(opts: InnerAssetsRetryOptions) {\n    hookCreateElement(opts)\n    // eslint-disable-next-line\n    if (typeof Node !== 'undefined') {\n        hookPrototype(Node.prototype, opts)\n    }\n    // eslint-disable-next-line\n    if (typeof Element !== 'undefined') {\n        hookPrototype(Element.prototype, opts)\n    }\n    return retryCollector\n}\n","/** @description data collector */\n\nimport { retryTimesProp, succeededProp, failedProp } from './constants'\n\nexport interface RetryCollector {\n    [x: string]: RetryStatistics\n}\n\nexport interface RetryStatistics {\n    [retryTimesProp]: number\n    [succeededProp]: string[]\n    [failedProp]: string[]\n}\n\n// statistic collector\nexport const retryCollector: RetryCollector = {}\n","import { stringReplace, loadNextScript, loadNextLink, hashTarget, randomString, arrayFrom, supportRules, getCssRules } from './util'\nimport { InnerAssetsRetryOptions } from './assets-retry'\nimport { extractInfoFromUrl } from './url'\nimport {\n    retryTimesProp,\n    failedProp,\n    hookedIdentifier,\n    succeededProp,\n    doc,\n    retryIdentifier\n} from './constants'\n\nconst retryCache: { [x: string]: boolean } = {}\n\n/**\n * init synchronous retrying of assets,\n * this includes the retrying of\n * script, link and img tags\n *\n * @export\n * @param {InnerAssetsRetryOptions} opts\n */\nexport default function initSync(opts: InnerAssetsRetryOptions) {\n    const onRetry = opts.onRetry\n    const getTargetUrl = function(target: EventTarget | null) {\n        if (target instanceof HTMLScriptElement || target instanceof HTMLImageElement) {\n            return target.src\n        }\n        if (target instanceof HTMLLinkElement) {\n            return target.href\n        }\n        return null\n    }\n    /**\n     * capture error on window\n     * when js / css / image failed to load\n     * reload the target with new domain\n     *\n     * @param {ErrorEvent} event\n     * @returns\n     */\n    const errorHandler = function(event: Event) {\n        if (!event) {\n            return\n        }\n        const target = event.target || event.srcElement\n        const domainMap = opts.domain\n        const originalUrl = getTargetUrl(target)\n        if (!originalUrl) {\n            // not one of script / link / image element\n            return\n        }\n        const [currentDomain, currentCollector] = extractInfoFromUrl(originalUrl, domainMap)\n        if (!currentCollector || !currentDomain) {\n            return\n        }\n        currentCollector[retryTimesProp]++\n        currentCollector[failedProp].push(originalUrl)\n        if (!domainMap[currentDomain] || currentCollector[retryTimesProp] > opts.maxRetryCount) {\n            // can not find a domain to switch\n            // or failed too many times\n            return\n        }\n        const newDomain = domainMap[currentDomain]\n        const newUrl = stringReplace(originalUrl, currentDomain, newDomain)\n        const userModifiedUrl = onRetry(newUrl, originalUrl, currentCollector)\n        // if onRetry returns null, do not retry this url\n        if (userModifiedUrl === null) {\n            return\n        }\n        // eslint-disable-next-line\n        if (typeof userModifiedUrl !== 'string') {\n            throw new Error('a string should be returned in `onRetry` function')\n        }\n        // cache retried elements\n        const elementId = hashTarget(target);\n        if (retryCache[elementId]) {\n            return;\n        }\n        retryCache[elementId] = true;\n        const onloadCallback = () => {\n            currentCollector[succeededProp].push(userModifiedUrl)\n        }\n        if (target instanceof HTMLScriptElement && !target.getAttribute(hookedIdentifier) && target.src) {\n            loadNextScript(target, userModifiedUrl, onloadCallback)\n            return\n        }\n        if (target instanceof HTMLLinkElement && target.href) {\n            loadNextLink(target, userModifiedUrl, onloadCallback)\n            return\n        }\n        if (target instanceof HTMLImageElement && target.src) {\n            target.setAttribute(retryIdentifier, randomString())\n            target.src = userModifiedUrl\n            target.onload = onloadCallback\n        }\n    }\n\n    /**\n     * test is link element loaded in load event\n     *\n     * @param {Event} event\n     */\n    const loadHandler = function(event: Event) {\n        if (!event) {\n            return;\n        }\n        const target = event.target || event.srcElement;\n        // only handle link element\n        if (!(target instanceof HTMLLinkElement)) {\n            return;\n        }\n        const supportStyleSheets = doc.styleSheets\n        // do not support styleSheets API\n        if (!supportStyleSheets) {\n            return;\n        }\n        const styleSheets = arrayFrom(doc.styleSheets) as CSSStyleSheet[]\n        const targetStyleSheet = styleSheets.filter(styleSheet => {\n            return styleSheet.href === target.href\n        })[0]\n        // do not support css rules API\n        if (!targetStyleSheet.rules && !targetStyleSheet.cssRules) {\n            return;\n        }\n        const styleRules = arrayFrom(getCssRules(targetStyleSheet))\n        if (styleRules.length === 0) {\n            errorHandler(event)\n        }\n    }\n\n    doc.addEventListener('error', errorHandler, true)\n    doc.addEventListener('load', loadHandler, true)\n}\n","import { arrayFrom, stringReplace, toSlug, supportRules, getCssRules } from './util'\nimport { doc } from './constants'\nimport { getCurrentDomain, DomainMap } from './url'\nimport { InnerAssetsRetryOptions } from './assets-retry'\n\ntype UrlProperty = 'backgroundImage' | 'borderImage' | 'listStyleImage'\n// cache\nconst handledStylesheets: { [x: string]: boolean } = {}\n\nconst processRules = function(\n    name: UrlProperty,\n    rule: CSSStyleRule,\n    styleSheet: CSSStyleSheet,\n    opts: InnerAssetsRetryOptions\n) {\n    const domainMap = opts.domain\n    const onRetry = opts.onRetry\n    const targetRule = rule.style && rule.style[name]\n    if (!targetRule) {\n        return\n    }\n    // skip data-uri\n    if (/^url\\([\"']?data:/.test(targetRule)) {\n        return\n    }\n    const [_, originalUrl] = targetRule.match(/^url\\([\"|'](.*)[\"|']\\)/) || []\n    if (!originalUrl) {\n        return\n    }\n    const currentDomain = getCurrentDomain(originalUrl, domainMap)\n    if (!currentDomain || !domainMap[currentDomain]) {\n        return\n    }\n    const urlList = Object.keys(domainMap)\n        .map(domain => {\n            const newUrl = stringReplace(originalUrl, currentDomain, domain)\n            const userModifiedUrl = onRetry(newUrl, originalUrl, null)\n            return `url(\"${userModifiedUrl}\")`\n        })\n        .join(',')\n    const cssText = rule.selectorText + `{ ${toSlug(name)}: ${urlList} !important; }`\n    try {\n        styleSheet.insertRule(cssText, getCssRules(styleSheet).length)\n    } catch (_) {\n        styleSheet.insertRule(cssText, 0)\n    }\n}\n\nconst processStyleSheets = (styleSheets: StyleSheet[], opts: InnerAssetsRetryOptions) => {\n    const urlProperties: UrlProperty[] = ['backgroundImage', 'borderImage', 'listStyleImage']\n    // TODO: iterating stylesheets may cause performance issues\n    // maybe find other approaches?\n    styleSheets.forEach((styleSheet: any) => {\n        // styleSheet\n        if (!supportRules(styleSheet)) {\n            return\n        }\n        if (handledStylesheets[styleSheet.href]) {\n            return\n        }\n        const styleRules = arrayFrom(getCssRules(styleSheet)) as CSSStyleRule[]\n        styleRules.forEach(rule => {\n            urlProperties.forEach(cssProperty => {\n                processRules(cssProperty, rule, styleSheet, opts)\n            })\n        })\n\n        if (styleSheet.href) {\n            handledStylesheets[styleSheet.href] = true\n        }\n    })\n}\n\nconst getStyleSheetsInDomainMap = function(styleSheets: StyleSheetList, domainMap: DomainMap) {\n    return arrayFrom(styleSheets).filter(styleSheet => {\n        if (!styleSheet.href) {\n            return false;\n        }\n        const currentDomain = getCurrentDomain(styleSheet.href, domainMap);\n        return !!currentDomain\n    })\n\n}\n\nexport default function initCss(opts: InnerAssetsRetryOptions) {\n    // detect is support styleSheets\n    const supportStyleSheets = doc.styleSheets\n    const domainMap = opts.domain\n    if (!supportStyleSheets) return false\n    const styleSheets = getStyleSheetsInDomainMap(doc.styleSheets, domainMap)\n    let currentStyleSheetLength = styleSheets.length;\n    setInterval(() => {\n        const newStyleSheets = getStyleSheetsInDomainMap(doc.styleSheets, domainMap)\n        const newStyleSheetsLength = newStyleSheets.length;\n        if (newStyleSheetsLength > currentStyleSheetLength) {\n            processStyleSheets(newStyleSheets, opts)\n            currentStyleSheetLength = newStyleSheetsLength\n        }\n    }, 250)\n}\n","import initAsync from './retry-async'\nimport initSync from './retry-sync'\nimport initCss from './retry-css'\nimport { RetryStatistics, retryCollector } from './collector'\nimport { maxRetryCountProp, onRetryProp, domainProp, win } from './constants'\nimport { Domain, DomainMap, prepareDomainMap } from './url'\nimport { setDefault, identity } from './util'\n\nexport type RetryFunction = (\n    currentUrl: string,\n    originalUrl: string,\n    retryCollector: null | RetryStatistics\n) => string | null\n\nexport interface AssetsRetryOptions {\n    [maxRetryCountProp]: number\n    [onRetryProp]: RetryFunction\n    [domainProp]: Domain\n}\n\nexport interface InnerAssetsRetryOptions {\n    [maxRetryCountProp]: number\n    [onRetryProp]: RetryFunction\n    [domainProp]: DomainMap\n}\n\nexport default function init(opts: AssetsRetryOptions = {} as any) {\n    try {\n        setDefault(opts, maxRetryCountProp, 3)\n        setDefault(opts, onRetryProp, identity)\n        // eslint-disable-next-line\n        if (typeof opts[domainProp] !== 'object') {\n            throw new Error('opts.domain cannot be non-object.')\n        }\n        const invalidOptions = Object.keys(opts).filter(key => [maxRetryCountProp, onRetryProp, domainProp].indexOf(key) === -1)\n        if (invalidOptions.length > 0) {\n            throw new Error('option name: ' + invalidOptions.join(', ') + ' is not valid.')\n        }\n        const innerOpts: InnerAssetsRetryOptions = {\n            [maxRetryCountProp]: opts[maxRetryCountProp],\n            [onRetryProp]: opts[onRetryProp],\n            [domainProp]: prepareDomainMap(opts[domainProp])\n        }\n        initAsync(innerOpts)\n        initSync(innerOpts)\n        if (__RETRY_IMAGE__) {\n            initCss(innerOpts)\n        }\n        return retryCollector\n    } catch (e) {\n        console && console.error('[assetsRetry] error captured', e)\n    }\n}\n"],"names":["identity","x","noop","setDefault","obj","key","defaultValue","isFunctionProperty","proto","e","prepareDomainMap","domains","Array","isArray","reduce","domainMap","domain","idx","array","length","getCurrentDomain","src","Object","keys","filter","indexOf","sort","prev","next","scriptProperties","retryTimesProp","succeededProp","failedProp","maxRetryCountProp","onRetryProp","domainProp","innerScriptProp","innerOnerrorProp","scriptTag","hookedIdentifier","retryIdentifier","doc","window","document","hasOwn","prototype","hasOwnProperty","stringReplace","current","oldStr","newStr","substring","arrayFrom","arrayLike","slice","call","loadNextScript","$script","newSrc","onload","readyState","test","navigator","userAgent","$newScript","createElement","HTMLScriptElement","forEach","_","onerror","setAttribute","randomString","originalNonce","getAttribute","getElementsByTagName","appendChild","retryId","newHtml","outerHTML","replace","write","newScript","querySelector","getCssRules","styleSheet","rules","cssRules","loadNextLink","$link","newHref","$newLink","HTMLLinkElement","href","hashTarget","element","HTMLElement","nodeName","join","Math","random","toString","retryCollector","extractInfoFromUrl","url","currentDomain","srcPath","substr","_a","getProto","getPrototypeOf","__proto__","concat","collectPropertyNames","getHookedScriptDescriptors","self","opts","maxRetryCount","onRetry","descriptor","isFn","value","apply","arguments","set","newVal","event","stopPropagation","currentCollector","userModifiedSrc","Error","func","thisArg","args","push","_called","get","hookCreateElement","originalCreateElement","name","options","$hookedScript","descriptors","defineProperties","createHookedScript","hookPrototype","target","originalFunc","map","item","this","Function","retryCache","initSync","errorHandler","srcElement","originalUrl","HTMLImageElement","newDomain","newUrl","userModifiedUrl","elementId","onloadCallback","addEventListener","styleSheets","targetStyleSheet","processRules","rule","targetRule","style","urlList","cssText","selectorText","$1","$2","toLowerCase","insertRule","handledStylesheets","processStyleSheets","urlProperties","supportRules","cssProperty","getStyleSheetsInDomainMap","invalidOptions","innerOpts","Node","Element","supportStyleSheets","currentStyleSheetLength","setInterval","newStyleSheets","newStyleSheetsLength","initCss","console","error"],"mappings":"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"}
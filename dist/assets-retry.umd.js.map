{"version":3,"file":"assets-retry.umd.js","sources":["../src/util.ts","../src/url.ts","../src/retry-async.ts","../src/constants.ts","../src/collector.ts","../src/retry-sync.ts","../src/retry-css.ts","../src/assets-retry.ts"],"sourcesContent":["import { scriptTag, linkTag, doc, retryIdentifier } from './constants'\n\nexport const identity = function<T>(x: T): T {\n    return x\n}\nexport const noop = () => {\n    /* noop */\n}\n\nexport const hasOwn = Object.prototype.hasOwnProperty\n/**\n * safely calls a function\n *\n * @template T this\n * @template R ReturnType<func>\n * @param {(this: T, ...callbackArgs: any[]) => R} func\n * @param {T} thisArg\n * @param {*} args\n * @returns {R}\n */\nexport const safeCall = function<T, R>(\n    func: (this: T, ...callbackArgs: any[]) => R,\n    thisArg: T,\n    args: any\n): R {\n    // eslint-disable-next-line\n    if (typeof func !== 'function') {\n        return null as any\n    }\n    return func.call(thisArg, args)\n}\n\n/**\n * replace a substring with new one\n *\n * @param {string} current current string\n * @param {string} oldStr substring to replace\n * @param {string} newStr new string\n * @returns\n */\nexport const stringReplace = function(current: string, oldStr: string, newStr: string) {\n    const idx = current.indexOf(oldStr)\n    if (idx === -1) {\n        return current;\n    }\n    return current.substring(0, idx) + newStr + current.substring(idx + oldStr.length)\n}\n\n/**\n * convert a camelCase string to a dash-separated string.\n *\n * @param {string} str\n * @returns\n */\nexport const toSlug = function(str: string) {\n    return str.replace(/([a-z])([A-Z])/g, (_, $1, $2) => `${$1}-${$2.toLowerCase()}`)\n}\n\n/**\n * set default value for object\n *\n * @param {any} obj object\n * @param {string} key key\n * @param {any} defaultValue default value\n */\nexport const setDefault = function(obj: any, key: string, defaultValue: any) {\n    obj[key] = obj[key] || defaultValue\n}\n\n/**\n * transform an array-like object to array\n *\n * @template T\n * @param {ArrayLike<T>} arrayLike\n * @returns {T[]}\n */\nexport const arrayFrom = function<T>(arrayLike: ArrayLike<T>): T[] {\n    return [].slice.call(arrayLike)\n}\n/**\n * collect all property names from current object to its ancestor\n *\n * @param {any} obj\n * @returns\n */\nexport const collectPropertyNames = function(obj: any) {\n    const getProto = Object.getPrototypeOf\n        ? Object.getPrototypeOf\n        : function(x: any) {\n              return x.__proto__\n          }\n    let keys = Object.keys(obj);\n    while (getProto(obj)) {\n        keys = keys.concat(Object.keys(getProto(obj)))\n        obj = getProto(obj)\n    }\n    return keys.filter(key => key !== 'constructor');\n}\n\n/**\n * @example\n * isFunctionProperty(HTMLScriptElement.prototype, 'src); // false\n * isFunctionProperty(HTMLScriptElement.prototype, 'getAttribute'); // true\n * @param {any} proto\n * @param {string} key\n * @returns\n */\nexport const isFunctionProperty = function(proto: any, key: string) {\n    try {\n        return typeof proto[key] === 'function'\n    } catch (e) {\n        // TypeError: Illegal invocation\n        // when evaluating properties like\n        // HTMLScriptElement.prototype.src\n        return false\n    }\n}\n\n/**\n * loads a new script element by previous failed script element\n *\n * @param {HTMLScriptElement} $script previous script element\n * @param {string} newSrc new url to try\n */\nexport const loadNextScript = function(\n    $script: HTMLScriptElement,\n    newSrc: string,\n    onload: () => void = noop\n) {\n    // when dealing with failed script tags in html,\n    // use `document.write` to ensure the correctness\n    // of loading order\n    if (document.readyState === 'loading') {\n        const retryId = Math.random()\n            .toString(36)\n            .slice(2)\n        const newHtml = $script.outerHTML\n            // delete previous retry id\n            .replace(/data-retry-id=\"[^\"]+\"/, '')\n            .replace(/src=(?:\"[^\"]+\"|.+)([ >])/, `${retryIdentifier}=${retryId} src=\"${newSrc}\"$1`)\n        document.write(newHtml)\n        const newScript = document.querySelector(\n            `script[${retryIdentifier}=\"${retryId}\"]`\n        ) as HTMLScriptElement\n        if (newScript) {\n            newScript.onload = onload\n        }\n        return\n    }\n    const $newScript = doc.createElement(scriptTag)\n    // copy script properties except src:\n    // type, noModule, charset, async, defer,\n    // crossOrigin, text, referrerPolicy, event,\n    // htmlFor, integrity (chrome)\n    Object.keys(HTMLScriptElement.prototype).forEach(function(key: string) {\n        if (key !== 'src' && ($script as any)[key] && typeof ($script as any)[key] !== 'object') {\n            try {\n                ;($newScript as any)[key] = ($script as any)[key]\n            } catch (_) {\n                /* noop */\n            }\n        }\n    })\n    $newScript.src = newSrc\n    $newScript.onload = $script.onload\n    $newScript.onerror = $script.onerror\n    // webpack nonce for csp\n    const originalNonce = $script.getAttribute('nonce')\n    if (originalNonce) {\n        $newScript.setAttribute('nonce', originalNonce)\n    }\n    doc.getElementsByTagName('head')[0].appendChild($newScript)\n}\n\n/**\n * loads a new link element by previous failed link element\n *\n * @param {HTMLLinkElement} $link previous link element\n * @param {string} newHref new url to try\n */\nexport const loadNextLink = function($link: HTMLLinkElement, newHref: string, onload: () => void) {\n    const $newLink = doc.createElement(linkTag)\n    // copy link properties except href:\n    // disabled, href, crossOrigin, rel, relList, media, hreflang,\n    // type, as, referrerPolicy, sizes, imageSrcset, imageSizes,\n    // charset, rev, target, sheet, integrity, import (chrome)\n    Object.keys(HTMLLinkElement.prototype).forEach(function(key: string) {\n        if (key !== 'href' && ($link as any)[key] && typeof ($link as any)[key] !== 'object') {\n            try {\n                ;($newLink as any)[key] = ($link as any)[key]\n            } catch (_) {\n                /* noop */\n            }\n        }\n    })\n    $newLink.href = newHref\n    $newLink.onload = onload\n    doc.getElementsByTagName('head')[0].appendChild($newLink)\n}\n","import { retryCollector, RetryStatistics } from './collector'\nimport { retryTimesProp, failedProp, succeededProp } from './constants'\n\nexport type Domain = string[] | { [x: string]: string }\nexport interface DomainMap {\n    [x: string]: string\n}\n\n/**\n * generate the domain map from user\n * @example\n * generateDomainMap(['a.cdn', 'b.cdn', 'c.cdn']) // {'a.cdn': 'b.cdn', 'b.cdn': 'c.cdn', 'c.cdn': 'a.cdn'}\n *\n * @param {Domain} domains\n * @returns {DomainMap}\n */\nexport const prepareDomainMap = function(domains: Domain): DomainMap {\n    // array\n    if (Array.isArray(domains)) {\n        return domains.reduce(function(domainMap, domain, idx, array) {\n            domainMap[domain] = array[(idx + 1) % array.length]\n            return domainMap\n        }, {} as DomainMap)\n    }\n    // object\n    return domains\n}\n\n/**\n * get path from src\n * @example\n * getUrlPath('https://a.cdn/js/1.js', 'a.cdn'); // '/js/1.js'\n * getUrlPath('https://a.cdn/namespace/js/1.js', 'a.cdn/namespace'); // '/js/1.js'\n * @param {string} src script src\n * @param {string} currentDomain domain name\n * @returns {string}\n */\nexport const getUrlPath = function(src: string, currentDomain: string) {\n    return src.substr(src.indexOf(currentDomain) + currentDomain.length, src.length)\n}\n\n/**\n * find out the domain of current loading script\n *\n * @param {string} src\n * @param {{ [x: string]: string }} domainMap\n * @returns\n */\nexport const getCurrentDomain = function(src: string, domainMap: DomainMap) {\n    return (\n        Object.keys(domainMap)\n            .filter(function(domain) {\n                return src.indexOf(domain) > -1\n            })\n            // sort by length (relevance)\n            .sort((prev, next) => next.length - prev.length)[0]\n    )\n}\n\n/**\n * extract domain from url, and get the\n * corresponding statistic collector\n * @param {string} url\n * @returns\n */\nexport const extractInfoFromUrl = function(\n    url: string,\n    domainMap: DomainMap\n): [string?, RetryStatistics?] {\n    const currentDomain = getCurrentDomain(url, domainMap)\n    if (!currentDomain) {\n        return []\n    }\n    const srcPath = getUrlPath(url, currentDomain)\n    retryCollector[srcPath] = retryCollector[srcPath] || {\n        [retryTimesProp]: 0,\n        [failedProp]: [],\n        [succeededProp]: []\n    }\n    return [currentDomain, retryCollector[srcPath]]\n}\n","import {\n    collectPropertyNames,\n    stringReplace,\n    isFunctionProperty,\n    loadNextScript,\n    safeCall,\n    hasOwn,\n    noop\n} from './util'\n\nimport {\n    retryTimesProp,\n    succeededProp,\n    failedProp,\n    maxRetryCountProp,\n    onRetryProp,\n    domainProp,\n    innerScriptProp,\n    innerOnloadProp,\n    innerOnerrorProp,\n    scriptTag,\n    hookedIdentifier,\n    doc,\n    win\n} from './constants'\nimport { retryCollector } from './collector'\nimport { prepareDomainMap, extractInfoFromUrl } from './url'\nimport { InnerAssetsRetryOptions } from './assets-retry'\nimport initCss from './retry-css'\n\nexport interface HookedScript {\n    [innerScriptProp]: HTMLScriptElement\n    [innerOnerrorProp]: (e: Partial<Event>) => void\n    [x: string]: any\n}\n\n// cache all properties of HTMLScriptElement.prototype\n// (including prototype properties) because it's big (length > 200)\n// otherwise it would be calculated every time when\n// a script request failed.\nconst scriptProperties = collectPropertyNames(HTMLScriptElement.prototype)\n\n/**\n * create the descriptor of hooked script object,\n * accessing any property on the hooked script object\n * will be delegated to the real HTMLScriptElement\n * except onload/onerror events\n *\n * @param {any} self hookedScript\n * @param {object} opts\n * @returns\n */\nconst getHookedScriptDescriptors = function(self: HookedScript, opts: InnerAssetsRetryOptions) {\n    const maxRetryCount = opts[maxRetryCountProp]\n    const domainMap = prepareDomainMap(opts[domainProp])\n    const onRetry = opts[onRetryProp]\n    return scriptProperties.reduce(function(descriptor, key) {\n        const isFn = isFunctionProperty(HTMLScriptElement.prototype, key)\n        // for function properties,\n        // do not assign getters/setters\n        if (isFn) {\n            descriptor[key] = {\n                value: function() {\n                    return (self[innerScriptProp] as any)[key].apply(\n                        self[innerScriptProp],\n                        arguments\n                    )\n                }\n            }\n        } else {\n            descriptor[key] = {\n                set: function(newVal) {\n                    if (key === 'onerror') {\n                        self[innerOnerrorProp] = newVal\n                        // hook error events,\n                        // forward the original onerror handler\n                        // to the next script element to load\n                        ;(self[innerScriptProp] as any).onerror = function(event: ErrorEvent) {\n                            event.stopPropagation && event.stopPropagation()\n                            const src = self[innerScriptProp].src\n                            const [currentDomain, currentCollector] = extractInfoFromUrl(\n                                src,\n                                domainMap\n                            )\n                            if (!currentDomain || !currentCollector) {\n                                return\n                            }\n                            const newSrc = stringReplace(\n                                src,\n                                currentDomain,\n                                domainMap[currentDomain]\n                            )\n                            const userModifiedSrc = onRetry(newSrc, src, currentCollector)\n                            // if onRetry returns null, do not retry this url\n                            if (userModifiedSrc === null) {\n                                return\n                            }\n                            // eslint-disable-next-line\n                            if (typeof userModifiedSrc !== 'string') {\n                                throw new Error('a string should be returned in `onRetry` function')\n                            }\n                            if (currentCollector[retryTimesProp] <= maxRetryCount) {\n                                loadNextScript(self[innerScriptProp], userModifiedSrc)\n                            } else {\n                                safeCall(self[innerOnerrorProp], self[innerScriptProp], event)\n                            }\n                        }\n                        return\n                    }\n                    if (key === 'onload') {\n                        self[innerOnloadProp] = newVal\n                        self[innerScriptProp].onload = function(event: Event) {\n                            const src = self[innerScriptProp].src\n                            const [_, currentCollector] = extractInfoFromUrl(src, domainMap)\n                            if (!currentCollector) {\n                                return\n                            }\n                            if (currentCollector[failedProp].indexOf(src) === -1) {\n                                currentCollector[succeededProp].push(src)\n                            }\n                            if (newVal && !newVal._called) {\n                                newVal._called = true\n                                newVal.call(self[innerScriptProp], event)\n                            }\n                        }\n                        return\n                    }\n                    ;(self[innerScriptProp] as any)[key] = newVal\n                },\n                get() {\n                    return (self[innerScriptProp] as any)[key]\n                }\n            }\n        }\n        return descriptor\n    }, {} as PropertyDescriptorMap)\n}\n\nconst createHookedScript = function(\n    $script: HTMLScriptElement,\n    opts: InnerAssetsRetryOptions\n): HookedScript {\n    $script.setAttribute(hookedIdentifier, 'true')\n    const $hookedScript: HookedScript = {\n        [innerScriptProp]: $script,\n        [innerOnerrorProp]: noop\n    }\n    const descriptors = getHookedScriptDescriptors($hookedScript, opts)\n    Object.defineProperties($hookedScript, descriptors)\n    return $hookedScript\n}\n\n/**\n * hook `document.createElement`\n * @param {InnerAssetsRetryOptions} opts\n */\nconst hookCreateElement = function(opts: InnerAssetsRetryOptions) {\n    const originalCreateElement = doc.createElement\n    ;(doc as any).createElement = function(name: string, options: any): any {\n        if (name === scriptTag) {\n            return createHookedScript((originalCreateElement as any).call(doc, scriptTag), opts)\n        }\n        return originalCreateElement.call(doc, name, options)\n    }\n    doc.createElement.toString = function() {\n        return 'function createElement() { [native code] }'\n    }\n}\n\n/**\n * create a hooked function which hooks every method of target.\n * if a method is hooked and its arguments contains the inner script tag\n * it will be replaced with the value of inner script tag\n *\n * @param {any} target hook target\n */\nconst hookPrototype = function(target: any, opts: InnerAssetsRetryOptions) {\n    const functionKeys = Object.keys(target).filter(key => isFunctionProperty(target, key))\n    functionKeys.forEach(key => {\n        const originalFunc = target[key]\n        target[key] = function(): any {\n            const args = [].slice.call(arguments).map((item: any) => {\n                return hasOwn.call(item, innerScriptProp) ? item[innerScriptProp] : item\n            })\n            return originalFunc.apply(this, args)\n        }\n        // keep original toString\n        if (/^\\w+$/.test(key)) {\n            target[key].toString = new Function(`return 'function ${key}() { [native code] }'`)\n        }\n    })\n}\n/**\n * init asynchronous retrying of script tags\n * @param {InnerAssetsRetryOptions} opts\n * @returns\n */\nexport default function initAsync(opts: InnerAssetsRetryOptions) {\n    hookCreateElement(opts)\n    // eslint-disable-next-line\n    if (typeof Node !== 'undefined') {\n        hookPrototype(Node.prototype, opts)\n    }\n    // eslint-disable-next-line\n    if (typeof Element !== 'undefined') {\n        hookPrototype(Element.prototype, opts)\n    }\n    return retryCollector\n}\n","export const retryTimesProp = 'retryTimes'\nexport const succeededProp = 'succeeded'\nexport const failedProp = 'failed'\nexport const maxRetryCountProp = 'maxRetryCount'\nexport const onRetryProp = 'onRetry'\nexport const domainProp = 'domain'\nexport const innerScriptProp = '_$assetsRetryScript'\nexport const innerOnloadProp = '_$assetsRetryOnload'\nexport const innerOnerrorProp = '_$assetsRetryOnerror'\nexport const scriptTag = 'script'\nexport const linkTag = 'link'\nexport const hookedIdentifier = 'data-assets-retry-hooked'\nexport const retryIdentifier = 'data-retry-id'\nexport const win = window\nexport const doc = window.document\n","/** @description data collector */\n\nimport { retryTimesProp, succeededProp, failedProp } from './constants'\n\nexport interface RetryCollector {\n    [x: string]: RetryStatistics\n}\n\nexport interface RetryStatistics {\n    [retryTimesProp]: number\n    [succeededProp]: string[]\n    [failedProp]: string[]\n}\n\n// statistic collector\nexport const retryCollector: RetryCollector = {}\n","import { stringReplace, loadNextScript, loadNextLink } from './util'\nimport { InnerAssetsRetryOptions } from './assets-retry'\nimport { extractInfoFromUrl } from './url'\nimport {\n    retryTimesProp,\n    failedProp,\n    hookedIdentifier,\n    maxRetryCountProp,\n    succeededProp,\n    win,\n    doc\n} from './constants'\n\n/**\n * init synchronous retrying of assets,\n * this includes the retrying of\n * script, link and img tags\n *\n * @export\n * @param {InnerAssetsRetryOptions} opts\n */\nexport default function initSync(opts: InnerAssetsRetryOptions) {\n    const onRetry = opts.onRetry\n    const getTargetUrl = function(target: EventTarget | null) {\n        if (target instanceof HTMLScriptElement || target instanceof HTMLImageElement) {\n            return target.src\n        }\n        if (target instanceof HTMLLinkElement) {\n            return target.href\n        }\n        return null\n    }\n    /**\n     * capture error on window\n     * when js / css / image failed to load\n     * reload the target with new domain\n     *\n     * @param {ErrorEvent} event\n     * @returns\n     */\n    const errorHandler = function(event: ErrorEvent) {\n        if (!event) {\n            return\n        }\n        const target = event.target || event.srcElement\n        const domainMap = opts.domain\n        const originalUrl = getTargetUrl(target)\n        if (!originalUrl) {\n            // not one of script / link / image element\n            return\n        }\n        const [currentDomain, currentCollector] = extractInfoFromUrl(originalUrl, domainMap)\n        if (!currentCollector || !currentDomain) {\n            return\n        }\n        currentCollector[retryTimesProp]++\n        currentCollector[failedProp].push(originalUrl)\n        if (!domainMap[currentDomain] || currentCollector[retryTimesProp] > opts.maxRetryCount) {\n            // can not find a domain to switch\n            // or failed too many times\n            return\n        }\n        const newDomain = domainMap[currentDomain]\n        const newUrl = stringReplace(originalUrl, currentDomain, newDomain)\n        const userModifiedUrl = onRetry(newUrl, originalUrl, currentCollector)\n        // if onRetry returns null, do not retry this url\n        if (userModifiedUrl === null) {\n            return\n        }\n        // eslint-disable-next-line\n        if (typeof userModifiedUrl !== 'string') {\n            throw new Error('a string should be returned in `onRetry` function')\n        }\n        const onloadCallback = () => {\n            currentCollector[succeededProp].push(userModifiedUrl)\n        }\n        if (target instanceof HTMLScriptElement && !target.getAttribute(hookedIdentifier) && target.src) {\n            loadNextScript(target, userModifiedUrl, onloadCallback)\n            return\n        }\n        if (target instanceof HTMLLinkElement && target.href) {\n            loadNextLink(target, userModifiedUrl, onloadCallback)\n            return\n        }\n        if (target instanceof HTMLImageElement && target.src) {\n            target.src = userModifiedUrl\n            target.onload = onloadCallback\n        }\n    }\n\n    doc.addEventListener('error', errorHandler, true)\n}\n","import { arrayFrom, stringReplace, toSlug } from './util'\nimport { doc } from './constants'\nimport { getCurrentDomain } from './url'\nimport { InnerAssetsRetryOptions } from './assets-retry'\n\ntype UrlProperty = 'backgroundImage' | 'borderImage' | 'listStyleImage'\n// cache\nconst handledStylesheets: { [x: string]: boolean } = {}\nconst supportRules = function(styleSheet: any) {\n    try {\n        return styleSheet.rules && styleSheet.rules.length > 0\n    } catch (_) {\n        return false\n    }\n}\nconst processRules = function(\n    name: UrlProperty,\n    rule: CSSStyleRule,\n    styleSheet: CSSStyleSheet,\n    opts: InnerAssetsRetryOptions\n) {\n    const domainMap = opts.domain\n    const onRetry = opts.onRetry\n    const targetRule = rule.style && rule.style[name]\n    if (!targetRule) {\n        return\n    }\n    // skip data-uri\n    if (/^url\\([\"']?data:/.test(targetRule)) {\n        return\n    }\n    const [_, originalUrl] = targetRule.match(/^url\\([\"|'](.*)[\"|']\\)/) || []\n    if (!originalUrl) {\n        return\n    }\n    const currentDomain = getCurrentDomain(originalUrl, domainMap)\n    if (!currentDomain || !domainMap[currentDomain]) {\n        return\n    }\n    const urlList = Object.keys(domainMap)\n        .filter(domain => domain !== currentDomain)\n        .map(domain => {\n            const newUrl = stringReplace(originalUrl, currentDomain, domain)\n            const userModifiedUrl = onRetry(newUrl, originalUrl, null)\n            return `url(\"${userModifiedUrl}\")`\n        })\n        .join(',')\n    const cssText = rule.selectorText + `{ ${toSlug(name)}: ${urlList}; }`\n    try {\n        styleSheet.insertRule(cssText, styleSheet.rules.length)\n    } catch (_) {\n        styleSheet.insertRule(cssText, 0)\n    }\n}\n\nconst processStyleSheets = (styleSheets: StyleSheet[], opts: InnerAssetsRetryOptions) => {\n    const urlProperties: UrlProperty[] = ['backgroundImage', 'borderImage', 'listStyleImage']\n    // TODO: iterating stylesheets may cause performance issues\n    // maybe find other approaches?\n    styleSheets.forEach((styleSheet: any) => {\n        // styleSheet\n        if (!supportRules(styleSheet)) {\n            return\n        }\n        if (handledStylesheets[styleSheet.href]) {\n            return\n        }\n        const styleRules = arrayFrom(styleSheet.rules as CSSStyleRule[])\n        styleRules.forEach((rule, ruleIndex) => {\n            urlProperties.forEach(cssProperty => {\n                processRules(cssProperty, rule, styleSheet, opts)\n            })\n        })\n\n        if (styleSheet.href) {\n            handledStylesheets[styleSheet.href] = true\n        }\n    })\n}\n\nexport default function initCss(opts: InnerAssetsRetryOptions) {\n    // detect is support styleSheets\n    const supportStyleSheets = document.styleSheets\n    if (!supportStyleSheets) return false\n    const styleSheets = arrayFrom(doc.styleSheets)\n    let currentStyleSheetLength = styleSheets.length;\n    setInterval(() => {\n        const newStyleSheets = arrayFrom(doc.styleSheets)\n        const newStyleSheetsLength = newStyleSheets.length;\n        if (newStyleSheetsLength > currentStyleSheetLength) {\n            processStyleSheets(newStyleSheets, opts)\n            currentStyleSheetLength = newStyleSheetsLength\n        }\n    }, 250)\n}\n","import initAsync from './retry-async'\nimport initSync from './retry-sync'\nimport initCss from './retry-css'\nimport { RetryStatistics, retryCollector } from './collector'\nimport { maxRetryCountProp, onRetryProp, domainProp, win } from './constants'\nimport { Domain, DomainMap, prepareDomainMap } from './url'\nimport { setDefault, identity } from './util'\n\nexport type RetryFunction = (\n    currentUrl: string,\n    originalUrl: string,\n    retryCollector: null | RetryStatistics\n) => string | null\n\nexport interface AssetsRetryOptions {\n    [maxRetryCountProp]: number\n    [onRetryProp]: RetryFunction\n    [domainProp]: Domain\n}\n\nexport interface InnerAssetsRetryOptions {\n    [maxRetryCountProp]: number\n    [onRetryProp]: RetryFunction\n    [domainProp]: DomainMap\n}\n\nexport default function init(opts: AssetsRetryOptions = {} as any) {\n    try {\n        setDefault(opts, maxRetryCountProp, 3)\n        setDefault(opts, onRetryProp, identity)\n        // eslint-disable-next-line\n        if (typeof opts[domainProp] !== 'object') {\n            throw new Error('opts.domain cannot be non-object.')\n        }\n        const invalidOptions = Object.keys(opts).filter(key => [maxRetryCountProp, onRetryProp, domainProp].indexOf(key) === -1)\n        if (invalidOptions.length > 0) {\n            throw new Error('option name: ' + invalidOptions.join(', ') + ' is not valid.')\n        }\n        const innerOpts: InnerAssetsRetryOptions = {\n            [maxRetryCountProp]: opts[maxRetryCountProp],\n            [onRetryProp]: opts[onRetryProp],\n            [domainProp]: prepareDomainMap(opts[domainProp])\n        }\n        initAsync(innerOpts)\n        initSync(innerOpts)\n        // if (__RETRY_IMAGE__) {\n            initCss(innerOpts)\n        // }\n        return retryCollector\n    } catch (e) {\n        console.error('[assetsRetry] error captured', e)\n    }\n}\n"],"names":["identity","x","noop","setDefault","obj","key","defaultValue","isFunctionProperty","proto","e","prepareDomainMap","domains","Array","isArray","reduce","domainMap","domain","idx","array","length","getCurrentDomain","src","Object","keys","filter","indexOf","sort","prev","next","getHookedScriptDescriptors","self","opts","maxRetryCount","maxRetryCountProp","domainProp","onRetry","onRetryProp","scriptProperties","descriptor","isFn","HTMLScriptElement","prototype","value","innerScriptProp","apply","arguments","set","newVal","innerOnerrorProp","onerror","event","stopPropagation","_a","currentDomain","currentCollector","newSrc","stringReplace","userModifiedSrc","Error","func","thisArg","args","retryTimesProp","loadNextScript","call","onload","failedProp","succeededProp","push","_called","get","scriptTag","hookedIdentifier","retryIdentifier","doc","window","document","hasOwn","hasOwnProperty","current","oldStr","newStr","substring","arrayFrom","arrayLike","slice","$script","readyState","$newScript","createElement","forEach","_","originalNonce","getAttribute","setAttribute","getElementsByTagName","appendChild","retryId","Math","random","toString","newHtml","outerHTML","replace","write","newScript","querySelector","loadNextLink","$link","newHref","$newLink","HTMLLinkElement","href","retryCollector","extractInfoFromUrl","url","srcPath","substr","getProto","getPrototypeOf","__proto__","concat","collectPropertyNames","hookCreateElement","originalCreateElement","name","options","$hookedScript","descriptors","defineProperties","createHookedScript","hookPrototype","target","originalFunc","map","item","this","test","Function","initSync","addEventListener","srcElement","originalUrl","HTMLImageElement","newDomain","newUrl","userModifiedUrl","onloadCallback","processRules","rule","styleSheet","targetRule","style","urlList","join","cssText","selectorText","$1","$2","toLowerCase","insertRule","rules","handledStylesheets","processStyleSheets","styleSheets","urlProperties","supportRules","ruleIndex","cssProperty","invalidOptions","innerOpts","Node","Element","currentStyleSheetLength","setInterval","newStyleSheets","newStyleSheetsLength","initCss","console","error"],"mappings":"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"}